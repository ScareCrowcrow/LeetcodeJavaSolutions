知识点汇总

=============================================================================
前缀和
适用场景：原始数组不会被修改的情况下，频繁查询某个区间的累加和
核心代码：
class PrefixSum {
     // 前缀和数组
     private int[] prefix;

     /* 输⼊⼀个数组，构造前缀和 */
     public PrefixSum(int[] nums) {
         prefix = new int[nums.length + 1];
         // 计算 nums 的累加和
         for (int i = 1; i < prefix.length; i++) {
            prefix[i] = prefix[i - 1] + nums[i - 1];
         }
     }
     /* 查询闭区间 [i, j] 的累加和 */
     public int query(int i, int j) {
        return prefix[j + 1] - prefix[i];
     }
}

=============================================================================
差分数组
适用场景：频繁对原始数组的某个区间的元素进行增减
核心代码：
class Difference {
     // 差分数组
     private int[] diff;

     /* 输⼊⼀个初始数组，区间操作将在这个数组上进⾏ */
     public Difference(int[] nums) {
         assert nums.length > 0;
         diff = new int[nums.length];
         // 根据初始数组构造差分数组
         diff[0] = nums[0];
         for (int i = 1; i < nums.length; i++) {
             diff[i] = nums[i] - nums[i - 1];
         }
     }
     /* 给闭区间 [i, j] 增加 val（可以是负数）*/
     public void increment(int i, int j, int val) {
         diff[i] += val;
         // 当 j+1 >= diff.length 时，说明是对 nums[i] 及以后的整个数组都进⾏修改，那么就不需要再给 diff 数组减 val 了
         if (j + 1 < diff.length) {
            diff[j + 1] -= val;
         }
     }
     /* 返回结果数组 */
     public int[] result() {
         int[] res = new int[diff.length];
         // 根据差分数组构造结果数组
         res[0] = diff[0];
         for (int i = 1; i < diff.length; i++) {
            res[i] = res[i - 1] + diff[i];
         }
         return res;
     }
}

=============================================================================
链表相关:
虚拟头节点适用场景：当你需要创造⼀条新链表的时 候，可以使⽤虚拟头结点简化边界情况的处理


